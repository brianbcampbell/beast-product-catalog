/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.ProductCatalog;
import generated.tables.records.VendorRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vendor extends TableImpl<VendorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>product_catalog.vendor</code>
     */
    public static final Vendor VENDOR = new Vendor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VendorRecord> getRecordType() {
        return VendorRecord.class;
    }

    /**
     * The column <code>product_catalog.vendor.vendor_id</code>.
     */
    public final TableField<VendorRecord, String> VENDOR_ID = createField(DSL.name("vendor_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>product_catalog.vendor.vendor_name</code>.
     */
    public final TableField<VendorRecord, String> VENDOR_NAME = createField(DSL.name("vendor_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>product_catalog.vendor.admin_user_ids</code>.
     */
    public final TableField<VendorRecord, String> ADMIN_USER_IDS = createField(DSL.name("admin_user_ids"), SQLDataType.CLOB, this, "");

    private Vendor(Name alias, Table<VendorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vendor(Name alias, Table<VendorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>product_catalog.vendor</code> table reference
     */
    public Vendor(String alias) {
        this(DSL.name(alias), VENDOR);
    }

    /**
     * Create an aliased <code>product_catalog.vendor</code> table reference
     */
    public Vendor(Name alias) {
        this(alias, VENDOR);
    }

    /**
     * Create a <code>product_catalog.vendor</code> table reference
     */
    public Vendor() {
        this(DSL.name("vendor"), null);
    }

    public <O extends Record> Vendor(Table<O> child, ForeignKey<O, VendorRecord> key) {
        super(child, key, VENDOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ProductCatalog.PRODUCT_CATALOG;
    }

    @Override
    public UniqueKey<VendorRecord> getPrimaryKey() {
        return Keys.KEY_VENDOR_PRIMARY;
    }

    @Override
    public Vendor as(String alias) {
        return new Vendor(DSL.name(alias), this);
    }

    @Override
    public Vendor as(Name alias) {
        return new Vendor(alias, this);
    }

    @Override
    public Vendor as(Table<?> alias) {
        return new Vendor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vendor rename(String name) {
        return new Vendor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vendor rename(Name name) {
        return new Vendor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vendor rename(Table<?> name) {
        return new Vendor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
